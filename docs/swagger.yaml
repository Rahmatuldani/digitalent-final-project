basePath: /api/v1
definitions:
  request.CommentRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    - photo_id
    type: object
  request.CommentUpdateReq:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  request.PhotoReq:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - caption
    - photo_url
    - title
    type: object
  request.UserLogin:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  request.UserRegReq:
    properties:
      age:
        minimum: 8
        type: integer
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  request.UserUpdateReq:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  response.GetComments:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/response.PhotoComment'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/response.UserComment'
      user_id:
        type: integer
    type: object
  response.PhotoComment:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  response.PhotoPostRes:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  response.PhotoUpdateRes:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.PhotosGetRes:
    properties:
      User:
        $ref: '#/definitions/response.UserPhotos'
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.PostComment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_url:
        type: integer
      user_id:
        type: integer
    type: object
  response.TokenJWT:
    properties:
      token:
        type: string
    type: object
  response.UpdateComment:
    properties:
      id:
        type: integer
      message:
        type: string
      photo_url:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.UserComment:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  response.UserPhotos:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  response.UserRegRes:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  response.WebResponse:
    properties:
      message: {}
    type: object
host: localhost:5000
info:
  contact: {}
  description: Server API for MyGram app
  title: MyGram API
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get comments
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetComments'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Post comments
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.PostComment'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Post comments
      tags:
      - comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete comment
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update comment
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CommentUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateComment'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update comment
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PhotosGetRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all photos
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Post photo
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.PhotoReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.PhotoPostRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Post photo
      tags:
      - photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete photo
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: User ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete photo
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update photo
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.PhotoReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PhotoUpdateRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update photo
      tags:
      - photos
  /users:
    delete:
      consumes:
      - application/json
      description: User delete
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User delete
      tags:
      - users
  /users/{userId}:
    put:
      consumes:
      - application/json
      description: User update
      parameters:
      - description: Bearer Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User update
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenJWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User login
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: Request Body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserRegReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.UserRegRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User register
      tags:
      - users
swagger: "2.0"
